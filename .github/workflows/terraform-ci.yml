name: Terraform CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: true
    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      # Install tfsec for security scanning
      - name: Install tfsec
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

      # Initialize Terraform (disable backend for CI)
      - name: Terraform Init
        run: terraform init -backend=false

      # Check code formatting
      - name: Terraform Format
        run: terraform fmt -check -recursive

      # Validate Terraform configuration
      - name: Terraform Validate
        run: terraform validate

        # Security Scan (fail only on Critical/High)
      - name: Security Scan
        run: |
          tfsec . --soft-fail --format=json > tfsec-results.json
          # Parse results: exit 1 only if Critical/High found
          critical_or_high=$(jq '[.results[] | select(.severity=="CRITICAL" or .severity=="HIGH")] | length' tfsec-results.json)
          if [ "$critical_or_high" -gt 0 ]; then
            echo "Found $critical_or_high CRITICAL/HIGH issues"
            cat tfsec-results.json | jq '.results[] | select(.severity=="CRITICAL" or .severity=="HIGH") | {rule_id, description, impact, resolution}'
            exit 1
          else
            echo "No CRITICAL/HIGH issues found. See tfsec-results.json for full report."
          fi

      # Dry-run plan (no state changes)
      - name: Terraform Plan
        run: terraform plan -lock=false -input=false
